#!/bin/sh
# eotk (c) 2017 Alec Muffett

### BEGIN INIT INFO
# Provides:          eotk
# Required-Start:    $local_fs $network $named $time $syslog
# Required-Stop:     $local_fs $network $named $time $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Description:       Enterprise Onion Toolkit
### END INIT INFO

# The general thinking here is: you create the script by using:
# eotk make-init-script
# ...and then copy/symlink it into the relevant directories

# let's factor these out in case of manual editing, although moving
# configured projects around the filesystem will be challenging;
# easier instead to configure in-situ and as the intended user.

EOTK_HOME=%EOTK_HOME%
EOTK_USER=%USER%
EOTK_STARTUP_LOG=/tmp/eotk-startup.log
EOTK_OB_DELAY=90 # backgrounded pause

# If you want logging to appear elsewhere, redefine log_message()

exec </dev/null >>$EOTK_STARTUP_LOG 2>&1

# help with tracking

date

# log_message: you might want to wire this into syslog, etc...

log_message() {
    echo "$@" 1>&2
}

# eotk wrapper

run_eotk() {
    su $EOTK_USER -c "exec $EOTK_HOME/eotk --boot $*"
    return $?
}

# does EOTK exist?

[ -d "$EOTK_HOME" ] || exit 0

cd $EOTK_HOME || exit 1

# just the basics; if it exists, start/stop it.

case "$1" in
    start)
        log_message Starting EOTK
	run_eotk start -a || exit 1
	if [ -d $EOTK_HOME/onionbalance.d ] ; then
            log_message Backgrounding start for EOTK OnionBalance
            # stdout should already be a file because of `exec` above
            ( ( sleep $EOTK_OB_DELAY && run_eotk ob-start -a ) & ) & # old-skool nohup
        fi
        log_message Started EOTK
	;;

    restart)
        log_message Restarting EOTK
	run_eotk restart -a || exit 1
	if [ -d $EOTK_HOME/onionbalance.d ] ; then
            run_eotk ob-restart -a || exit 1
        fi
        log_message Restarted EOTK
	;;

    stop)
        log_message Stopping EOTK
	run_eotk shutdown # does everything
        log_message Stopped EOTK
	;;

    *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
	;;
esac

# done

exit 0
