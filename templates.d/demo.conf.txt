# -*- conf -*-
# eotk (c) 2017 Alec Muffett

# documentation for default settings moved to "TUNEABLES.md"

#################### hardmap examples ####################

# hardmap is designed to run on a single machine, for protoyping,
# testing, and for small production deployments.

# in hardmap a `project` contains onion services with pre-established
# ("hard coded") onion keys, and a single tor daemon (per project)
# which feeds requests for 1/more onion addresses into nginx, which
# remaps & rewrites them, finally passing the request onto the backend
# website and rewriting the website's response in return

# "default" project
hardmap %NEW_ONION% aclu.org
hardmap %NEW_ONION% liberty-human-rights.org.uk

# a topical project
set project digital-rights
hardmap %NEW_ONION% openrightsgroup.org
hardmap %NEW_ONION% eff.org
hardmap %NEW_ONION% accessnow.org
hardmap %NEW_ONION% digitalrights.ie

# aside: privacy international already have privacyintyqcroe.onion

# another project
set project journalists
hardmap %NEW_ONION% cpj.org

#################### softmap examples ####################

################################################################
# TIP: UNLESS YOU ARE LAYING OUT AN ONIONSITE FOR A MEDIUM/LARGE
# ENTERPRISE, YOU CAN PROBABLY SKIP THIS SECTION & GO HAVE FUN!
################################################################

# softmap is designed to run on 1-or-more machines, and requires
# `onionbalance` to synthesise tor multiprocessing, providing an
# enterprise-scalable means for onionsite provisioning.

# the result is an expandable and highly available "cloud" of tor
# servers which can support mapping of several/tens/scores of domains
# simultaneously for hundreds to thousands of simultaneous users.

# in softmap, instead of a `project` creating onion services with
# pre-established keys, softmap projects use many, independent tor
# daemons, each of which creates a self-chosen, random address.

# a single nginx (per machine) listens to all to all of the tor
# daemons in a given softmap project, and it services the HTTP
# requests sent to any/all of them; since nginx already understands
# multiprocessing (see `nginx_workers`) this is okay.

# a softmap project may be replicated (rsync? docker?) to several
# machines in a cloud, providing linear scalability; all that remains
# is for onionbalance to be configured with the "random" onion
# addresses of the cloud's tor daemons, and for it to republish them
# under (a) "service" onion address(es).

# it is important for efficiency and security to not replicate the
# per-tor-worker private tor keys, as these serve like the unique
# worker IP addresses in a traditional TCP/IP load-balancer setup;
# instead each softmap instance should choose its own keys, which
# should subsequently be configured into onionbalance.

set project wiki
softmap %NEW_SOFT_ONION% wikipedia.org m
softmap %NEW_SOFT_ONION% wikimedia.org m
softmap %NEW_SOFT_ONION% wikimediafoundation.org m
softmap %NEW_SOFT_ONION% mediawiki.org m
softmap %NEW_SOFT_ONION% wikibooks.org m
softmap %NEW_SOFT_ONION% wikidata.org m
softmap %NEW_SOFT_ONION% wikinews.org m
softmap %NEW_SOFT_ONION% wikiquote.org m
softmap %NEW_SOFT_ONION% wikisource.org m
softmap %NEW_SOFT_ONION% wikiversity.org m
softmap %NEW_SOFT_ONION% wikivoyage.org m
softmap %NEW_SOFT_ONION% wiktionary.org m
# more?
