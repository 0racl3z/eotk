# -*- conf -*-
# eotk (c) 2017 Alec Muffett

#################### defaults ####################

# NOTE: all variables, excepting `project`, are global in scope; if
# they are set *anywhere* then that value will apply to *all*
# projects.  if set multiple times, the last value wins.

# create a "/hello-onion/" URL on all onion domains/subdomains; this
# provides a helpful fixed point when prototyping to navigate to for
# accepting self-signed SSL certificates, etc. Use `0` to switch off.

set nginx_hello_onion 1

# where nginx will get DNS from; if locally, perhaps try installing `dnsmasq`

set nginx_resolver 8.8.8.8

# generic max-number-of-any-resource (eg: descriptors) in nginx

set nginx_rlim 1024

# generic max-number-of-seconds-to-wait (eg: connect timeout) in nginx

set nginx_timeout 30

# nginx understands multiprocessing, tor does not, but nginx will have
# more work to do, therefore run several nginx workers...

set nginx_workers 5

# number of introduction points per onion - see tor manual; for basic
# prototypes 3 is fine, for corporate production services use 10 (max)

set tor_intros_per_daemon 3

# 1 = faster but less/not anonymous; 0 = slower but more anonymous

set tor_single_onion 1

#################### hardmap examples ####################

# hardmap is designed to run on a single machine, for protoyping,
# testing, or for small deployments.

# in hardmap a `project` contains onion services with pre-established
# ("hard coded") onion keys, and a single tor daemon (per project)
# feeds requests for 1/more onion addresses into nginx, which remaps
# and rewrites them, passing the request onto the backend website.

# "default" project
hardmap secrets.d/%NEW_ONION%.key aclu.org
hardmap secrets.d/%NEW_ONION%.key liberty-human-rights.org.uk

# a topical project
set project digital-rights
hardmap secrets.d/%NEW_ONION%.key openrightsgroup.org
hardmap secrets.d/%NEW_ONION%.key eff.org
hardmap secrets.d/%NEW_ONION%.key accessnow.org
hardmap secrets.d/%NEW_ONION%.key digitalrights.ie
# privacy international already have privacyintyqcroe.onion

# another project
set project journalists
hardmap secrets.d/%NEW_ONION%.key cpj.org

#################### softmap examples ####################

################################################################
# TIP: UNLESS YOU ARE LAYING OUT AN ONIONSITE FOR A MEDIUM/LARGE
# ENTERPRISE, YOU CAN PROBABLY SKIP THIS SECTION & GO HAVE FUN!
################################################################

# softmap is designed to run on 1-or-more machines, and requires
# `onionbalance` to synthesise tor multiprocessing, providing an
# enterprise-scalable means for onionsite provisioning.

# the result is an expandable and highly available "cloud" of tor
# servers which can support mapping of several/tens/scores of domains
# simultaneously for hundreds to thousands of simultaneous users.

# in softmap, instead of a `project` creating onion services with
# pre-established keys, softmap projects use many, independent tor
# daemons, each of which creates a self-chosen, random address.

# a single nginx (per machine) listens to all to all of the tor
# daemons in a given softmap project, and it services the HTTP
# requests sent to any/all of them; since nginx already understands
# multiprocessing (see `nginx_workers`) this is okay.

# a softmap project may be replicated (rsync? docker?) to several
# machines in a cloud, providing linear scalability; all that remains
# is for onionbalance to be configured with the "random" onion
# addresses of the cloud's tor daemons, and for it to republish them
# under (a) "service" onion address(es).

# it is important for efficiency and security to not replicate the
# per-tor-worker private tor keys, as these serve like the unique
# worker IP addresses in a traditional TCP/IP load-balancer setup;
# instead each softmap instance should choose its own keys, which
# should subsequently be configured into onionbalance.

# onioncloud: 7x servers, each with 4 cores => 28 cores

set project onioncloud

# softmap only: per-host-per-project number of tor workers; tor is
# very efficient, so this generally does not have to be a big number.
# also: this number will be multiplied by the number of times you
# deploy the project, ie: this number in each machine or container.

set softmap_tor_workers 4

# softmap only: the per-host-per-project number of nginx workers per
# machine or container; let's guess "5x per tor worker" => 5 * 4 = 20;
# possibly a bigger multiplier - 7x? 10x? - may eventually be needed.

set softmap_nginx_workers 20

# example

# softmap %NEW_ONION% site.tld sub1 sub2 sub3.sub2

# end
